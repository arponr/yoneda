// Generated by CoffeeScript 1.7.1
(function() {
  var CTModel, CTView, Message, MessageList, MessageListItemView, MessageListView, NewThreadView, TextUtil, Thread, ThreadList, ThreadListItemView, ThreadListView, ThreadView, UI, fmtTime, inputTemplate, load, loadLogin, loadRoot, loadThread, lowerKeys, mathjaxTypeset, prezero, relurl, scroll, scrollBottom, scrollIfAtBottom, ui, unwrapJQuery, websocket,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  relurl = function() {
    return window.location.href.toString().split(window.location.host)[1];
  };

  TextUtil = (function() {
    function TextUtil() {}

    TextUtil.reCensor = /\$\$[^\$]+\$\$|\$[^\$]+\$/gm;

    TextUtil.reUncensor = /\$(\d+)\$/gm;

    TextUtil.format = function(text, markdown, tex) {
      if (markdown) {
        return this.texdown(text, tex);
      } else {
        return this.escape(text);
      }
    };

    TextUtil.escape = function(text) {
      return text;
    };

    TextUtil.texdown = function(text, tex) {
      var censored, html, math, replCensor, replUncensor;
      if (tex) {
        math = [];
        replCensor = function(match) {
          math.push(match);
          return "$" + (math.length - 1) + "$";
        };
        replUncensor = function(match, ind, offset, string) {
          return math[parseInt(ind)];
        };
        censored = text.replace(this.reCensor, replCensor);
        html = markdown.toHTML(censored);
        return html.replace(this.reUncensor, replUncensor);
      } else {
        return markdown.toHTML(text);
      }
    };

    return TextUtil;

  })();

  unwrapJQuery = function(f) {
    return function(el) {
      return f(el instanceof jQuery ? el[0] : el);
    };
  };

  mathjaxTypeset = unwrapJQuery(function(el) {
    return MathJax.Hub.Queue(["Typeset", MathJax.Hub, el]);
  });

  scrollBottom = unwrapJQuery(function(el) {
    return el.scrollHeight - el.offsetHeight;
  });

  scroll = function($el) {
    return $el.scrollTop(scrollBottom($el));
  };

  scrollIfAtBottom = function($el, jax, cb) {
    var atBottom;
    if (cb == null) {
      cb = function() {};
    }
    atBottom = $el.scrollTop() === scrollBottom($el);
    cb();
    if (atBottom) {
      if (jax) {
        return MathJax.Hub.Queue(function() {
          return scroll($el);
        });
      } else {
        return scroll($el);
      }
    }
  };

  websocket = function(url) {
    url = location.origin + url;
    return new WebSocket(url.replace(/^http/, "ws").replace("thread", "socket"));
  };

  lowerKeys = function(a) {
    var b, k, l, v;
    if (typeof a !== "object") {
      return a;
    }
    b = {};
    for (k in a) {
      v = a[k];
      l = k.charAt(0).toLowerCase() + k.slice(1);
      b[l] = lowerKeys(v);
    }
    return b;
  };

  prezero = function(x) {
    if (x < 10) {
      return "0" + x;
    } else {
      return x;
    }
  };

  fmtTime = function(stamp, fmt) {
    var date, obj, time;
    obj = new Date(stamp);
    date = (function(obj) {
      var d, m, y;
      y = obj.getFullYear();
      m = prezero(obj.getMonth() + 1);
      d = prezero(obj.getDate());
      return "" + y + "-" + m + "-" + d;
    })(obj);
    time = (function(obj) {
      var h, m, p;
      h = obj.getHours();
      m = prezero(obj.getMinutes());
      p = "am";
      if (h === 0) {
        h = 12;
      } else if (h > 12) {
        h -= 12;
        p = "pm";
      }
      return "" + h + ":" + m + p;
    })(obj);
    return fmt.replace("d", date).replace("t", time);
  };

  CTModel = (function(_super) {
    __extends(CTModel, _super);

    function CTModel() {
      return CTModel.__super__.constructor.apply(this, arguments);
    }

    CTModel.defineAttributes = function() {
      var attrs, k, _fn, _i, _len;
      attrs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _fn = (function(_this) {
        return function(k) {
          return Object.defineProperty(_this.prototype, k, {
            get: function() {
              return this.get(k);
            },
            set: function(v) {
              return this.set(k, v);
            }
          });
        };
      })(this);
      for (_i = 0, _len = attrs.length; _i < _len; _i++) {
        k = attrs[_i];
        _fn(k);
      }
    };

    CTModel.prototype.toJSON = function(timeFmt) {
      var json;
      if (timeFmt == null) {
        timeFmt = "";
      }
      json = CTModel.__super__.toJSON.apply(this, arguments);
      if (this.time) {
        json.time = fmtTime(this.time, timeFmt);
      }
      return json;
    };

    return CTModel;

  })(Backbone.Model);

  Message = (function(_super) {
    __extends(Message, _super);

    function Message() {
      return Message.__super__.constructor.apply(this, arguments);
    }

    Message.defineAttributes("username", "rawBody", "fmtBody", "markdown", "tex", "time");

    return Message;

  })(CTModel);

  MessageList = (function(_super) {
    __extends(MessageList, _super);

    function MessageList() {
      return MessageList.__super__.constructor.apply(this, arguments);
    }

    MessageList.prototype.model = Message;

    return MessageList;

  })(Backbone.Collection);

  Thread = (function(_super) {
    __extends(Thread, _super);

    function Thread() {
      return Thread.__super__.constructor.apply(this, arguments);
    }

    Thread.defineAttributes("name", "users", "time", "last", "messages");

    Thread.prototype.defaults = {
      messages: new MessageList()
    };

    Thread.prototype.initialize = function() {
      this.socket = websocket("/thread/" + this.id);
      return this.socket.onmessage = (function(_this) {
        return function(e) {
          var m;
          m = lowerKeys(JSON.parse(e.data));
          return _this.messages.add(new Message(m));
        };
      })(this);
    };

    Thread.prototype.toJSON = function() {
      var json, k, v;
      json = Thread.__super__.toJSON.apply(this, arguments);
      json.users = ((function() {
        var _ref, _results;
        _ref = this.users;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push(v);
        }
        return _results;
      }).call(this)).join(", ");
      return json;
    };

    Thread.prototype.getData = function(cb) {
      if (cb == null) {
        cb = function() {};
      }
      return $.getJSON("/data/thread/" + this.id, (function(_this) {
        return function(data) {
          data = lowerKeys(data);
          _this.set(data);
          return cb();
        };
      })(this));
    };

    Thread.prototype.getMessages = function(cb) {
      if (cb == null) {
        cb = function() {};
      }
      this.messages.reset();
      return $.getJSON("/data/threadmsgs/" + this.id, (function(_this) {
        return function(data) {
          var pt, _i, _len;
          if (data) {
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              pt = data[_i];
              pt = lowerKeys(pt);
              _this.messages.add(new Message(pt));
            }
          }
          return cb();
        };
      })(this));
    };

    return Thread;

  })(CTModel);

  ThreadList = (function(_super) {
    __extends(ThreadList, _super);

    function ThreadList() {
      return ThreadList.__super__.constructor.apply(this, arguments);
    }

    ThreadList.prototype.model = Thread;

    ThreadList.prototype.getData = function(cb) {
      if (cb == null) {
        cb = function() {};
      }
      return $.getJSON("/data/threadlist", (function(_this) {
        return function(data) {
          var pt, _i, _len;
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            pt = data[_i];
            pt = lowerKeys(pt);
            _this.add(new Thread(pt));
          }
          return cb();
        };
      })(this));
    };

    return ThreadList;

  })(Backbone.Collection);

  ui = null;

  inputTemplate = "<div class=\"message-input\">\n    <div class=\"preview-pane\"></div>\n    <div class=\"icon down\">&#59232;</div>\n    <textarea class=\"message-area\" name=\"message\"\n        placeholder=\"Write a message...\">\n    </textarea>\n    <div class=\"message-options\">\n        <input class=\"send-button\" type=\"button\" value=\"send\">\n        <input class=\"preview-button\" type=\"button\" value=\"preview\">\n        <label class=\"check\">\n            <input class=\"markdown-check\" type=\"checkbox\" checked=\"checked\">\n            <span class=\"checklabel\">markdown</span>\n        </label>\n        <label class=\"check\">\n            <input class=\"tex-check\" type=\"checkbox\" checked=\"checked\">\n            <span class=\"checklabel\">TeX</span>\n        </label>\n    </div>\n</div>";

  CTView = (function(_super) {
    __extends(CTView, _super);

    function CTView() {
      this.toggle = __bind(this.toggle, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      return CTView.__super__.constructor.apply(this, arguments);
    }

    CTView.prototype.show = function() {
      if (ui.cur[this.type]) {
        ui.cur[this.type].$el.hide();
      }
      ui.cur[this.type] = this;
      return this.$el.show();
    };

    CTView.prototype.hide = function() {
      if (ui.cur[this.type] === this) {
        ui.cur[this.type] = null;
        return this.$el.hide();
      }
    };

    CTView.prototype.toggle = function() {
      if (ui.cur[this.type] === this) {
        return this.hide();
      } else {
        return this.show();
      }
    };

    return CTView;

  })(Backbone.View);

  NewThreadView = (function(_super) {
    __extends(NewThreadView, _super);

    function NewThreadView() {
      return NewThreadView.__super__.constructor.apply(this, arguments);
    }

    NewThreadView.prototype.type = "side-left";

    NewThreadView.prototype.className = "new-thread-view";

    NewThreadView.prototype.template = "<header>\n    <h1>Start a new thread</h1>\n</header>\n<form class=\"new-thread-form\" action=\"/newthread\" method=\"POST\">\n    <input class=\"new-thread-input\" type=\"text\" name=\"name\"\n        placeholder=\"thread name\"\n        autocomplete=\"off\" spellcheck=\"false\">\n    <input class=\"new-thread-input\" type=\"text\" name=\"users\"\n        placeholder=\"recipients (space-separated usernames)\"\n        autocomplete=\"off\" spellcheck=\"false\">\n    " + inputTemplate + "\n</form>";

    NewThreadView.prototype.render = function() {
      var $markdownCheck, $messageArea, $newThreadForm, $previewButton, $previewPane, $sendButton, $texCheck, onSend, previewPaneOpen, timeout, updatePreview;
      this.$el.html(this.template);
      $newThreadForm = this.$(".new-thread-form");
      $previewPane = this.$(".preview-pane");
      $messageArea = this.$(".message-area");
      $sendButton = this.$(".send-button");
      $previewButton = this.$(".preview-button");
      $markdownCheck = this.$(".markdown-check");
      $texCheck = this.$(".tex-check");
      onSend = function() {
        return $newThreadForm.submit();
      };
      $messageArea.keydown(function(e) {
        if (e.shiftKey && e.keyCode === 13) {
          onSend();
          return e.preventDefault();
        }
      });
      $sendButton.click(onSend);
      updatePreview = function() {
        var markdown, tex;
        markdown = $markdownCheck.prop("checked");
        tex = $texCheck.prop("checked");
        $previewPane.html(TextUtil.format($messageArea.val(), markdown, tex));
        if (tex) {
          return mathjaxTypeset($previewPane);
        }
      };
      previewPaneOpen = false;
      timeout = 0;
      $previewButton.click(function() {
        if (previewPaneOpen) {
          $messageArea.animate({
            top: "0"
          }, 150);
          $messageArea.unbind("input propertychange");
        } else {
          $messageArea.animate({
            top: $previewPane.outerHeight()
          }, 150);
          updatePreview();
          $messageArea.bind("input propertychange", function() {
            clearTimeout(timeout);
            return timeout = setTimeout(updatePreview, 500);
          });
        }
        return previewPaneOpen = !previewPaneOpen;
      });
      return this;
    };

    return NewThreadView;

  })(CTView);

  MessageListItemView = (function(_super) {
    __extends(MessageListItemView, _super);

    function MessageListItemView() {
      return MessageListItemView.__super__.constructor.apply(this, arguments);
    }

    MessageListItemView.prototype.initialize = function(options) {
      return this.message = options.message;
    };

    MessageListItemView.prototype.template = _.template("<div class=\"msg\">\n    <div class=\"aside\">\n        <time><%= time %></time>\n    </div>\n    <div class=\"username\"><%= username %></div>\n    <div class=\"body fmt <%if (tex) print(\"math\"); %>\">\n        <%= fmtBody %>\n    </div>\n    <% if (markdown || tex) { %>\n    <div class=\"body raw\">\n        <%= rawBody %>\n    </div>\n    <% } %>\n</div>");

    MessageListItemView.prototype.render = function() {
      this.$el.html(this.template(this.message.toJSON("d, t")));
      if (this.message.tex) {
        mathjaxTypeset(this.el);
      }
      return this;
    };

    return MessageListItemView;

  })(Backbone.View);

  MessageListView = (function(_super) {
    __extends(MessageListView, _super);

    function MessageListView() {
      return MessageListView.__super__.constructor.apply(this, arguments);
    }

    MessageListView.prototype.initialize = function(options) {
      this.messages = options.messages || new MessageList();
      return this.messages.on("add", this.renderMessage, this);
    };

    MessageListView.prototype.render = function() {
      this.messages.forEach((function(_this) {
        return function(message) {
          return _this.renderMessage(message);
        };
      })(this));
      return this;
    };

    MessageListView.prototype.renderMessage = function(message) {
      var messageView;
      messageView = new MessageListItemView({
        message: message
      });
      return scrollIfAtBottom(this.$el, message.tex, (function(_this) {
        return function() {
          return _this.$el.append(messageView.render().el);
        };
      })(this));
    };

    return MessageListView;

  })(Backbone.View);

  ThreadView = (function(_super) {
    __extends(ThreadView, _super);

    function ThreadView() {
      return ThreadView.__super__.constructor.apply(this, arguments);
    }

    ThreadView.prototype.type = "main";

    ThreadView.prototype.initialize = function(options) {
      return this.thread = options.thread;
    };

    ThreadView.prototype.template = _.template("<header>\n    <h1><%= name %></h1>\n    <h2><%= users %></h2>\n</header>\n<div class=\"messages\"></div>\n" + inputTemplate);

    ThreadView.prototype.render = function() {
      var $markdownCheck, $messageArea, $previewButton, $previewPane, $sendButton, $texCheck, hidePreview, onSend, onsend, previewPaneOpen, timeout, updatePreview;
      this.$el.html(this.template(this.thread.toJSON()));
      this.$messagesEl = this.$(".messages");
      $previewPane = this.$(".preview-pane");
      $messageArea = this.$(".message-area");
      $sendButton = this.$(".send-button");
      $previewButton = this.$(".preview-button");
      $markdownCheck = this.$(".markdown-check");
      $texCheck = this.$(".tex-check");
      this.thread.getMessages((function(_this) {
        return function() {
          var messagesView;
          return messagesView = new MessageListView({
            messages: _this.thread.messages,
            el: _this.$messagesEl
          }).render();
        };
      })(this));
      onSend = function() {
        return $newThreadForm.submit();
      };
      $messageArea.keydown(function(e) {
        if (e.shiftKey && e.keyCode === 13) {
          onSend();
          return e.preventDefault();
        }
      });
      $sendButton.click(onSend);
      updatePreview = function() {
        var markdown, tex;
        markdown = $markdownCheck.prop("checked");
        tex = $texCheck.prop("checked");
        $previewPane.html(TextUtil.format($messageArea.val(), markdown, tex));
        if (tex) {
          return mathjaxTypeset($previewPane);
        }
      };
      previewPaneOpen = false;
      timeout = 0;
      $previewButton.click(function() {
        if (previewPaneOpen) {
          $messageArea.animate({
            top: "0"
          }, 150);
          $messageArea.unbind("input propertychange");
        } else {
          $messageArea.animate({
            top: $previewPane.outerHeight()
          }, 150);
          updatePreview();
          $messageArea.bind("input propertychange", function() {
            clearTimeout(timeout);
            return timeout = setTimeout(updatePreview, 500);
          });
        }
        return previewPaneOpen = !previewPaneOpen;
      });
      return this;
      hidePreview = function(b) {
        prevPane.html("");
        down.hide(150);
        prevPane.animate({
          bottom: "30px"
        }, 150);
        if (b) {
          return this.messagesEl.animate({
            bottom: "135px"
          }, 150);
        } else {
          return this.messagesEl.animate({
            bottom: "135px",
            scrollTop: this.messagesEl.scrollTop() - 100
          }, 150);
        }
      };
      onsend = (function(_this) {
        return function() {
          var m;
          m = {
            "RawBody": msgInput.val(),
            "Markdown": mdCheck.is(":checked"),
            "Tex": texCheck.is(":checked")
          };
          msgInput.val("");
          if (prevPane.css("bottom") === "120px") {
            hidePreview(true);
          }
          return _this.thread.socket.send(JSON.stringify(m));
        };
      })(this);
      msgInput.keydown(function(e) {
        if (e.shiftKey && e.keyCode === 13) {
          onsend();
          return e.preventDefault();
        }
      });
      send.click(onsend);
      preview.click(function() {
        var m, mc, tc;
        mc = mdCheck.is(":checked");
        tc = texCheck.is(":checked");
        m = {
          "raw": msgInput.val(),
          "markdown": mc ? "md" : "",
          "tex": tc ? "tex" : ""
        };
        return prevPane.load("/preview", m, function() {
          if (tc) {
            mathjaxTypeset(prevPane[0]);
          }
          if (prevPane.css("bottom") === "30px") {
            down.show(150);
            prevPane.animate({
              bottom: "120px"
            }, 150);
            return this.messagesEl.animate({
              bottom: "235px",
              scrollTop: this.messagesEl.scrollTop() + 100
            }, 150);
          }
        });
      });
      down.click(function() {
        return hidePreview(false);
      });
      return this;
    };

    return ThreadView;

  })(CTView);

  ThreadListItemView = (function(_super) {
    __extends(ThreadListItemView, _super);

    function ThreadListItemView() {
      this.showThreadView = __bind(this.showThreadView, this);
      return ThreadListItemView.__super__.constructor.apply(this, arguments);
    }

    ThreadListItemView.prototype.className = "item";

    ThreadListItemView.prototype.initialize = function(options) {
      this.thread = options.thread;
      this.thread.messages.on("add", this.render, this);
      return this.threadView = null;
    };

    ThreadListItemView.prototype.template = _.template("<time><%= time %></time>\n<div class=\"name\"><%= name %></div>\n<div class=\"users\"><%= users %></div>\n<% if (last) { %>\n<div class=\"lastmsg\">\n    <%= last.username %>: <%= last.fmtBody %>\n</div>\n<% } %>");

    ThreadListItemView.prototype.render = function() {
      this.$el.html(this.template(this.thread.toJSON("d<br>t")));
      return this;
    };

    ThreadListItemView.prototype.events = {
      "click": "showThreadView"
    };

    ThreadListItemView.prototype.showThreadView = function() {
      if (!this.threadView) {
        this.threadView = ui.addView(ThreadView, {
          thread: this.thread
        }).render();
      }
      return this.threadView.show();
    };

    return ThreadListItemView;

  })(Backbone.View);

  ThreadListView = (function(_super) {
    __extends(ThreadListView, _super);

    function ThreadListView() {
      return ThreadListView.__super__.constructor.apply(this, arguments);
    }

    ThreadListView.prototype.type = "side-right";

    ThreadListView.prototype.initialize = function(options) {
      return this.threads = options.threads;
    };

    ThreadListView.prototype.render = function() {
      this.threads.forEach((function(_this) {
        return function(thread) {
          var itemView;
          itemView = new ThreadListItemView({
            thread: thread
          });
          return _this.$el.append(itemView.render().el);
        };
      })(this));
      return this;
    };

    return ThreadListView;

  })(CTView);

  UI = (function(_super) {
    __extends(UI, _super);

    function UI() {
      return UI.__super__.constructor.apply(this, arguments);
    }

    UI.prototype.template = "<nav class=\"controls\">\n    <div class=\"icon right notify\">&#8962;</div>\n    <div class=\"icon left settings\">&#9881;</div>\n    <div class=\"icon left addthread\">&#59160;</div>\n</nav>\n<div class=\"side-left\"></div>\n<div class=\"main\"></div>\n<div class=\"side-right\"></div>";

    UI.prototype.render = function() {
      var $newThreadIcon, $notifyIcon, $settingsIcon, newThreadView, threads;
      this.$el.html(this.template);
      this.cur = {};
      $notifyIcon = this.$(".icon.notify");
      $settingsIcon = this.$(".icon.settings");
      $newThreadIcon = this.$(".icon.addthread");
      newThreadView = this.addView(NewThreadView).render();
      $newThreadIcon.click(function() {
        $newThreadIcon.toggleClass("active");
        return newThreadView.toggle();
      });
      threads = new ThreadList();
      threads.getData((function(_this) {
        return function() {
          var threadListView;
          threadListView = _this.addView(ThreadListView, {
            threads: threads
          }).render();
          threadListView.show();
          return $notifyIcon.click(threadListView.show);
        };
      })(this));
      return this;
    };

    UI.prototype.addView = function(viewType, options) {
      var view;
      if (options == null) {
        options = {};
      }
      options.className = "view " + (options.className || viewType.prototype.className || "");
      view = new viewType(options);
      this.$("." + viewType.prototype.type).append(view.el);
      return view;
    };

    return UI;

  })(Backbone.View);

  loadThread = function() {
    var panel, threadId;
    panel = buildPanel();
    threadId = relurl().substring("/thread/".length);
    return $.getJSON("/data/thread/" + threadId, function(thread) {
      return buildThread(panel, thread, function() {
        flip(threadKey(threadId));
        return $(document.body).append(panel);
      });
    });
  };

  loadRoot = function() {
    MathJax.Hub.Config({
      tex2jax: {
        inlineMath: [["$", "$"]],
        processClass: "math",
        ignoreClass: "nomath"
      },
      "HTML-CSS": {
        scale: 95,
        availableFonts: [],
        webFont: "Gyre-Termes"
      }
    });
    ui = new UI({
      el: $(document.body)
    });
    return ui.render();
  };

  loadLogin = function() {
    var again, login, submit, sw;
    sw = $("#switch");
    login = $("#login");
    submit = $("#submit");
    again = $("#again");
    return sw.click(function() {
      if (again.is(":visible")) {
        submit.val("login");
        login.attr({
          action: "/login"
        });
        sw.val("need to register?");
        return again.hide();
      } else {
        submit.val("register");
        login.attr({
          action: "/register"
        });
        sw.val("already have an account?");
        return again.show();
      }
    });
  };

  load = {
    "loginpage": loadLogin,
    "rootpage": loadRoot,
    "threadpage": loadThread
  };

  jQuery(function() {
    return load[document.body.id]();
  });

}).call(this);
